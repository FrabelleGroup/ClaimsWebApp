//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClaimsSystem.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IClaims")]
    public interface IClaims {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_ChargeSlip_Body", ReplyAction="http://tempuri.org/IClaims/Get_ChargeSlip_BodyResponse")]
        string Get_ChargeSlip_Body(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_ChargeSlip_Body", ReplyAction="http://tempuri.org/IClaims/Get_ChargeSlip_BodyResponse")]
        System.Threading.Tasks.Task<string> Get_ChargeSlip_BodyAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_ChargeSlip_Head", ReplyAction="http://tempuri.org/IClaims/Get_ChargeSlip_HeadResponse")]
        string Get_ChargeSlip_Head(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_ChargeSlip_Head", ReplyAction="http://tempuri.org/IClaims/Get_ChargeSlip_HeadResponse")]
        System.Threading.Tasks.Task<string> Get_ChargeSlip_HeadAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_CompanyList", ReplyAction="http://tempuri.org/IClaims/Get_CompanyListResponse")]
        string Get_CompanyList(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_CompanyList", ReplyAction="http://tempuri.org/IClaims/Get_CompanyListResponse")]
        System.Threading.Tasks.Task<string> Get_CompanyListAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_EmployeeList", ReplyAction="http://tempuri.org/IClaims/Get_EmployeeListResponse")]
        string Get_EmployeeList(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_EmployeeList", ReplyAction="http://tempuri.org/IClaims/Get_EmployeeListResponse")]
        System.Threading.Tasks.Task<string> Get_EmployeeListAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Group_Rights", ReplyAction="http://tempuri.org/IClaims/Get_Group_RightsResponse")]
        string Get_Group_Rights(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Group_Rights", ReplyAction="http://tempuri.org/IClaims/Get_Group_RightsResponse")]
        System.Threading.Tasks.Task<string> Get_Group_RightsAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Logistics_BodyReport", ReplyAction="http://tempuri.org/IClaims/Get_Logistics_BodyReportResponse")]
        string Get_Logistics_BodyReport(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Logistics_BodyReport", ReplyAction="http://tempuri.org/IClaims/Get_Logistics_BodyReportResponse")]
        System.Threading.Tasks.Task<string> Get_Logistics_BodyReportAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Logistics_HeaderReport", ReplyAction="http://tempuri.org/IClaims/Get_Logistics_HeaderReportResponse")]
        string Get_Logistics_HeaderReport(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Logistics_HeaderReport", ReplyAction="http://tempuri.org/IClaims/Get_Logistics_HeaderReportResponse")]
        System.Threading.Tasks.Task<string> Get_Logistics_HeaderReportAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Modules", ReplyAction="http://tempuri.org/IClaims/Get_ModulesResponse")]
        string Get_Modules(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Modules", ReplyAction="http://tempuri.org/IClaims/Get_ModulesResponse")]
        System.Threading.Tasks.Task<string> Get_ModulesAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Qa_Report", ReplyAction="http://tempuri.org/IClaims/Get_Qa_ReportResponse")]
        string Get_Qa_Report(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Qa_Report", ReplyAction="http://tempuri.org/IClaims/Get_Qa_ReportResponse")]
        System.Threading.Tasks.Task<string> Get_Qa_ReportAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Qa_Report_Imglnk", ReplyAction="http://tempuri.org/IClaims/Get_Qa_Report_ImglnkResponse")]
        string Get_Qa_Report_Imglnk(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Qa_Report_Imglnk", ReplyAction="http://tempuri.org/IClaims/Get_Qa_Report_ImglnkResponse")]
        System.Threading.Tasks.Task<string> Get_Qa_Report_ImglnkAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_SupplierList", ReplyAction="http://tempuri.org/IClaims/Get_SupplierListResponse")]
        string Get_SupplierList(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_SupplierList", ReplyAction="http://tempuri.org/IClaims/Get_SupplierListResponse")]
        System.Threading.Tasks.Task<string> Get_SupplierListAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Tall_Report", ReplyAction="http://tempuri.org/IClaims/Get_Tall_ReportResponse")]
        string Get_Tall_Report(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Tall_Report", ReplyAction="http://tempuri.org/IClaims/Get_Tall_ReportResponse")]
        System.Threading.Tasks.Task<string> Get_Tall_ReportAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_User_Accounts", ReplyAction="http://tempuri.org/IClaims/Get_User_AccountsResponse")]
        string Get_User_Accounts(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_User_Accounts", ReplyAction="http://tempuri.org/IClaims/Get_User_AccountsResponse")]
        System.Threading.Tasks.Task<string> Get_User_AccountsAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_User_Groups", ReplyAction="http://tempuri.org/IClaims/Get_User_GroupsResponse")]
        string Get_User_Groups(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_User_Groups", ReplyAction="http://tempuri.org/IClaims/Get_User_GroupsResponse")]
        System.Threading.Tasks.Task<string> Get_User_GroupsAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Cod", ReplyAction="http://tempuri.org/IClaims/Get_CodResponse")]
        string Get_Cod(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_Cod", ReplyAction="http://tempuri.org/IClaims/Get_CodResponse")]
        System.Threading.Tasks.Task<string> Get_CodAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_NoticeToExplain_Body", ReplyAction="http://tempuri.org/IClaims/Get_NoticeToExplain_BodyResponse")]
        string Get_NoticeToExplain_Body(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_NoticeToExplain_Body", ReplyAction="http://tempuri.org/IClaims/Get_NoticeToExplain_BodyResponse")]
        System.Threading.Tasks.Task<string> Get_NoticeToExplain_BodyAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_NoticeToExplain_Head", ReplyAction="http://tempuri.org/IClaims/Get_NoticeToExplain_HeadResponse")]
        string Get_NoticeToExplain_Head(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Get_NoticeToExplain_Head", ReplyAction="http://tempuri.org/IClaims/Get_NoticeToExplain_HeadResponse")]
        System.Threading.Tasks.Task<string> Get_NoticeToExplain_HeadAsync(string _Parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_ChargeSlip_Body", ReplyAction="http://tempuri.org/IClaims/Set_ChargeSlip_BodyResponse")]
        void Set_ChargeSlip_Body(int CSBodyID, int CSNo, string PaymentDetails, System.DateTime DatePaid, string PaymentPeriodCovered, bool Check, bool BillingDeduction, bool CreditMemo, bool SalaryDeduction, bool Others, string OthersRemarks, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_ChargeSlip_Body", ReplyAction="http://tempuri.org/IClaims/Set_ChargeSlip_BodyResponse")]
        System.Threading.Tasks.Task Set_ChargeSlip_BodyAsync(int CSBodyID, int CSNo, string PaymentDetails, System.DateTime DatePaid, string PaymentPeriodCovered, bool Check, bool BillingDeduction, bool CreditMemo, bool SalaryDeduction, bool Others, string OthersRemarks, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_ChargeSlip_Head", ReplyAction="http://tempuri.org/IClaims/Set_ChargeSlip_HeadResponse")]
        void Set_ChargeSlip_Head(
                    int CSNo, 
                    string SubjectName, 
                    decimal AmountCharged, 
                    System.DateTime Date, 
                    System.DateTime PaymentPeriodFrom, 
                    System.DateTime PaymentPeriodTo, 
                    bool ChargeToToll, 
                    bool ChargeToSupplier, 
                    bool ChargeToFBCEmp, 
                    bool ChargeToTrucking, 
                    bool ChargeToADP, 
                    bool ChargeToTDC, 
                    bool QARR, 
                    int QARRNo, 
                    bool LNCR, 
                    int LNCRNo, 
                    bool TNCR, 
                    int TNCRNo, 
                    bool NTE, 
                    int NTENo, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    System.DateTime PreparedByDate, 
                    int NotedByID, 
                    System.DateTime NotedByDate, 
                    int ReceivedByID, 
                    System.DateTime ReceivedByDate, 
                    bool LackOfAttachment, 
                    bool ForInspection, 
                    bool WithContention, 
                    bool AuditOthers, 
                    string AuditOthersRemarks, 
                    string PaymentPendingUpdate, 
                    string FinalResolution, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_ChargeSlip_Head", ReplyAction="http://tempuri.org/IClaims/Set_ChargeSlip_HeadResponse")]
        System.Threading.Tasks.Task Set_ChargeSlip_HeadAsync(
                    int CSNo, 
                    string SubjectName, 
                    decimal AmountCharged, 
                    System.DateTime Date, 
                    System.DateTime PaymentPeriodFrom, 
                    System.DateTime PaymentPeriodTo, 
                    bool ChargeToToll, 
                    bool ChargeToSupplier, 
                    bool ChargeToFBCEmp, 
                    bool ChargeToTrucking, 
                    bool ChargeToADP, 
                    bool ChargeToTDC, 
                    bool QARR, 
                    int QARRNo, 
                    bool LNCR, 
                    int LNCRNo, 
                    bool TNCR, 
                    int TNCRNo, 
                    bool NTE, 
                    int NTENo, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    System.DateTime PreparedByDate, 
                    int NotedByID, 
                    System.DateTime NotedByDate, 
                    int ReceivedByID, 
                    System.DateTime ReceivedByDate, 
                    bool LackOfAttachment, 
                    bool ForInspection, 
                    bool WithContention, 
                    bool AuditOthers, 
                    string AuditOthersRemarks, 
                    string PaymentPendingUpdate, 
                    string FinalResolution, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Logistics_BodyReport", ReplyAction="http://tempuri.org/IClaims/Set_Logistics_BodyReportResponse")]
        void Set_Logistics_BodyReport(int LNCRBodyID, int LNCRHeadID, string DocumentReferenceNo, string ItemCustomer, decimal Quantity, string UnitOfMeasurement, decimal Amount, string Remarks, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Logistics_BodyReport", ReplyAction="http://tempuri.org/IClaims/Set_Logistics_BodyReportResponse")]
        System.Threading.Tasks.Task Set_Logistics_BodyReportAsync(int LNCRBodyID, int LNCRHeadID, string DocumentReferenceNo, string ItemCustomer, decimal Quantity, string UnitOfMeasurement, decimal Amount, string Remarks, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Logistics_HeaderReport", ReplyAction="http://tempuri.org/IClaims/Set_Logistics_HeaderReportResponse")]
        string Set_Logistics_HeaderReport(
                    int LNCRHeadID, 
                    int CompanyID, 
                    int SupplierID, 
                    string DriverName, 
                    string Helper, 
                    System.DateTime Date, 
                    System.DateTime ChargeSlipDate, 
                    System.DateTime TransactionDate, 
                    System.DateTime DateCreated, 
                    bool Category_Shortages, 
                    bool Category_LateLiquidation, 
                    bool Category_LateArrival, 
                    bool Category_NoShow, 
                    bool Category_LateDelivery, 
                    bool Category_NonDelivery, 
                    bool Category_QualityRelated, 
                    bool Category_Others, 
                    string Category_OthersRemarks, 
                    bool Penalty_WrittenWarning, 
                    bool Penalty_Charge, 
                    bool Penalty_Others, 
                    string Penalty_OthersRemarks, 
                    string PreparedBy, 
                    string AcknowledgeBy, 
                    string ApprovedBy, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Logistics_HeaderReport", ReplyAction="http://tempuri.org/IClaims/Set_Logistics_HeaderReportResponse")]
        System.Threading.Tasks.Task<string> Set_Logistics_HeaderReportAsync(
                    int LNCRHeadID, 
                    int CompanyID, 
                    int SupplierID, 
                    string DriverName, 
                    string Helper, 
                    System.DateTime Date, 
                    System.DateTime ChargeSlipDate, 
                    System.DateTime TransactionDate, 
                    System.DateTime DateCreated, 
                    bool Category_Shortages, 
                    bool Category_LateLiquidation, 
                    bool Category_LateArrival, 
                    bool Category_NoShow, 
                    bool Category_LateDelivery, 
                    bool Category_NonDelivery, 
                    bool Category_QualityRelated, 
                    bool Category_Others, 
                    string Category_OthersRemarks, 
                    bool Penalty_WrittenWarning, 
                    bool Penalty_Charge, 
                    bool Penalty_Others, 
                    string Penalty_OthersRemarks, 
                    string PreparedBy, 
                    string AcknowledgeBy, 
                    string ApprovedBy, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Cod", ReplyAction="http://tempuri.org/IClaims/Set_CodResponse")]
        void Set_Cod(int CODID, int NTEID, string Sec, string Para, string Provision, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Cod", ReplyAction="http://tempuri.org/IClaims/Set_CodResponse")]
        System.Threading.Tasks.Task Set_CodAsync(int CODID, int NTEID, string Sec, string Para, string Provision, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_NoticeToExplain_Body", ReplyAction="http://tempuri.org/IClaims/Set_NoticeToExplain_BodyResponse")]
        void Set_NoticeToExplain_Body(int OffenseID, int NTEID, string Details, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_NoticeToExplain_Body", ReplyAction="http://tempuri.org/IClaims/Set_NoticeToExplain_BodyResponse")]
        System.Threading.Tasks.Task Set_NoticeToExplain_BodyAsync(int OffenseID, int NTEID, string Details, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_NoticeToExplain_Head", ReplyAction="http://tempuri.org/IClaims/Set_NoticeToExplain_HeadResponse")]
        string Set_NoticeToExplain_Head(int NTEID, int CompanyID, System.DateTime DATE, string EmployeeName, string Subject, System.DateTime IncidentDateTime, string IncidentSuspensionDays, string Remarks, bool Status, string IncidentLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_NoticeToExplain_Head", ReplyAction="http://tempuri.org/IClaims/Set_NoticeToExplain_HeadResponse")]
        System.Threading.Tasks.Task<string> Set_NoticeToExplain_HeadAsync(int NTEID, int CompanyID, System.DateTime DATE, string EmployeeName, string Subject, System.DateTime IncidentDateTime, string IncidentSuspensionDays, string Remarks, bool Status, string IncidentLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Qa_Report", ReplyAction="http://tempuri.org/IClaims/Set_Qa_ReportResponse")]
        string Set_Qa_Report(
                    int QARRID, 
                    int CompanyID, 
                    string ReferenceCode, 
                    System.DateTime ReferenceDate, 
                    string IssuedTo, 
                    int SupplierID, 
                    string Department, 
                    string InitiatedBy, 
                    string NotedBy, 
                    string Subject, 
                    bool Type_Legal, 
                    bool Type_Product, 
                    bool Type_Procedure, 
                    bool Type_StructuralAndSanitation, 
                    bool Type_Other, 
                    string Type_OtherRemarks, 
                    bool NC_SupplierServiceProvider, 
                    bool NC_FBC, 
                    bool NC_Toll, 
                    bool NC_ADP, 
                    bool NC_Trucker, 
                    bool NC_Other, 
                    string NC_OtherRemarks, 
                    string SummaryReport, 
                    System.DateTime DateCreated, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Qa_Report", ReplyAction="http://tempuri.org/IClaims/Set_Qa_ReportResponse")]
        System.Threading.Tasks.Task<string> Set_Qa_ReportAsync(
                    int QARRID, 
                    int CompanyID, 
                    string ReferenceCode, 
                    System.DateTime ReferenceDate, 
                    string IssuedTo, 
                    int SupplierID, 
                    string Department, 
                    string InitiatedBy, 
                    string NotedBy, 
                    string Subject, 
                    bool Type_Legal, 
                    bool Type_Product, 
                    bool Type_Procedure, 
                    bool Type_StructuralAndSanitation, 
                    bool Type_Other, 
                    string Type_OtherRemarks, 
                    bool NC_SupplierServiceProvider, 
                    bool NC_FBC, 
                    bool NC_Toll, 
                    bool NC_ADP, 
                    bool NC_Trucker, 
                    bool NC_Other, 
                    string NC_OtherRemarks, 
                    string SummaryReport, 
                    System.DateTime DateCreated, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Qa_Report_Imglnk", ReplyAction="http://tempuri.org/IClaims/Set_Qa_Report_ImglnkResponse")]
        void Set_Qa_Report_Imglnk(int ImgID, int QARRID, string ImgLnk, string FileName, System.DateTime FileDate, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Qa_Report_Imglnk", ReplyAction="http://tempuri.org/IClaims/Set_Qa_Report_ImglnkResponse")]
        System.Threading.Tasks.Task Set_Qa_Report_ImglnkAsync(int ImgID, int QARRID, string ImgLnk, string FileName, System.DateTime FileDate, bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Tall_Report", ReplyAction="http://tempuri.org/IClaims/Set_Tall_ReportResponse")]
        void Set_Tall_Report(
                    int TallID, 
                    int CompanyID, 
                    System.DateTime Date, 
                    string TotalAffected, 
                    decimal TotalAffectedAmount, 
                    bool InventoryVariance, 
                    bool RawMaterials, 
                    bool FinishedGoods, 
                    bool TechnicalScrap, 
                    bool YieldVariances, 
                    bool ConsumptionVariance, 
                    bool DelayReport, 
                    bool QADeviation, 
                    bool WrongLabel, 
                    bool ShortLacking, 
                    bool QANonConformance, 
                    bool WeakSeal, 
                    bool Bursting, 
                    bool LoosePack, 
                    bool Rejects, 
                    bool Contamination, 
                    bool SwabGMPSanitation, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    int ReceivedByID, 
                    int AcknowledgeByID, 
                    bool Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClaims/Set_Tall_Report", ReplyAction="http://tempuri.org/IClaims/Set_Tall_ReportResponse")]
        System.Threading.Tasks.Task Set_Tall_ReportAsync(
                    int TallID, 
                    int CompanyID, 
                    System.DateTime Date, 
                    string TotalAffected, 
                    decimal TotalAffectedAmount, 
                    bool InventoryVariance, 
                    bool RawMaterials, 
                    bool FinishedGoods, 
                    bool TechnicalScrap, 
                    bool YieldVariances, 
                    bool ConsumptionVariance, 
                    bool DelayReport, 
                    bool QADeviation, 
                    bool WrongLabel, 
                    bool ShortLacking, 
                    bool QANonConformance, 
                    bool WeakSeal, 
                    bool Bursting, 
                    bool LoosePack, 
                    bool Rejects, 
                    bool Contamination, 
                    bool SwabGMPSanitation, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    int ReceivedByID, 
                    int AcknowledgeByID, 
                    bool Status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClaimsChannel : ClaimsSystem.ServiceReference1.IClaims, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClaimsClient : System.ServiceModel.ClientBase<ClaimsSystem.ServiceReference1.IClaims>, ClaimsSystem.ServiceReference1.IClaims {
        
        public ClaimsClient() {
        }
        
        public ClaimsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClaimsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClaimsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClaimsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Get_ChargeSlip_Body(string _Parameter) {
            return base.Channel.Get_ChargeSlip_Body(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_ChargeSlip_BodyAsync(string _Parameter) {
            return base.Channel.Get_ChargeSlip_BodyAsync(_Parameter);
        }
        
        public string Get_ChargeSlip_Head(string _Parameter) {
            return base.Channel.Get_ChargeSlip_Head(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_ChargeSlip_HeadAsync(string _Parameter) {
            return base.Channel.Get_ChargeSlip_HeadAsync(_Parameter);
        }
        
        public string Get_CompanyList(string _Parameter) {
            return base.Channel.Get_CompanyList(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_CompanyListAsync(string _Parameter) {
            return base.Channel.Get_CompanyListAsync(_Parameter);
        }
        
        public string Get_EmployeeList(string _Parameter) {
            return base.Channel.Get_EmployeeList(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_EmployeeListAsync(string _Parameter) {
            return base.Channel.Get_EmployeeListAsync(_Parameter);
        }
        
        public string Get_Group_Rights(string _Parameter) {
            return base.Channel.Get_Group_Rights(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Group_RightsAsync(string _Parameter) {
            return base.Channel.Get_Group_RightsAsync(_Parameter);
        }
        
        public string Get_Logistics_BodyReport(string _Parameter) {
            return base.Channel.Get_Logistics_BodyReport(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Logistics_BodyReportAsync(string _Parameter) {
            return base.Channel.Get_Logistics_BodyReportAsync(_Parameter);
        }
        
        public string Get_Logistics_HeaderReport(string _Parameter) {
            return base.Channel.Get_Logistics_HeaderReport(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Logistics_HeaderReportAsync(string _Parameter) {
            return base.Channel.Get_Logistics_HeaderReportAsync(_Parameter);
        }
        
        public string Get_Modules(string _Parameter) {
            return base.Channel.Get_Modules(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_ModulesAsync(string _Parameter) {
            return base.Channel.Get_ModulesAsync(_Parameter);
        }
        
        public string Get_Qa_Report(string _Parameter) {
            return base.Channel.Get_Qa_Report(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Qa_ReportAsync(string _Parameter) {
            return base.Channel.Get_Qa_ReportAsync(_Parameter);
        }
        
        public string Get_Qa_Report_Imglnk(string _Parameter) {
            return base.Channel.Get_Qa_Report_Imglnk(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Qa_Report_ImglnkAsync(string _Parameter) {
            return base.Channel.Get_Qa_Report_ImglnkAsync(_Parameter);
        }
        
        public string Get_SupplierList(string _Parameter) {
            return base.Channel.Get_SupplierList(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_SupplierListAsync(string _Parameter) {
            return base.Channel.Get_SupplierListAsync(_Parameter);
        }
        
        public string Get_Tall_Report(string _Parameter) {
            return base.Channel.Get_Tall_Report(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_Tall_ReportAsync(string _Parameter) {
            return base.Channel.Get_Tall_ReportAsync(_Parameter);
        }
        
        public string Get_User_Accounts(string _Parameter) {
            return base.Channel.Get_User_Accounts(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_User_AccountsAsync(string _Parameter) {
            return base.Channel.Get_User_AccountsAsync(_Parameter);
        }
        
        public string Get_User_Groups(string _Parameter) {
            return base.Channel.Get_User_Groups(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_User_GroupsAsync(string _Parameter) {
            return base.Channel.Get_User_GroupsAsync(_Parameter);
        }
        
        public string Get_Cod(string _Parameter) {
            return base.Channel.Get_Cod(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_CodAsync(string _Parameter) {
            return base.Channel.Get_CodAsync(_Parameter);
        }
        
        public string Get_NoticeToExplain_Body(string _Parameter) {
            return base.Channel.Get_NoticeToExplain_Body(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_NoticeToExplain_BodyAsync(string _Parameter) {
            return base.Channel.Get_NoticeToExplain_BodyAsync(_Parameter);
        }
        
        public string Get_NoticeToExplain_Head(string _Parameter) {
            return base.Channel.Get_NoticeToExplain_Head(_Parameter);
        }
        
        public System.Threading.Tasks.Task<string> Get_NoticeToExplain_HeadAsync(string _Parameter) {
            return base.Channel.Get_NoticeToExplain_HeadAsync(_Parameter);
        }
        
        public void Set_ChargeSlip_Body(int CSBodyID, int CSNo, string PaymentDetails, System.DateTime DatePaid, string PaymentPeriodCovered, bool Check, bool BillingDeduction, bool CreditMemo, bool SalaryDeduction, bool Others, string OthersRemarks, bool Status) {
            base.Channel.Set_ChargeSlip_Body(CSBodyID, CSNo, PaymentDetails, DatePaid, PaymentPeriodCovered, Check, BillingDeduction, CreditMemo, SalaryDeduction, Others, OthersRemarks, Status);
        }
        
        public System.Threading.Tasks.Task Set_ChargeSlip_BodyAsync(int CSBodyID, int CSNo, string PaymentDetails, System.DateTime DatePaid, string PaymentPeriodCovered, bool Check, bool BillingDeduction, bool CreditMemo, bool SalaryDeduction, bool Others, string OthersRemarks, bool Status) {
            return base.Channel.Set_ChargeSlip_BodyAsync(CSBodyID, CSNo, PaymentDetails, DatePaid, PaymentPeriodCovered, Check, BillingDeduction, CreditMemo, SalaryDeduction, Others, OthersRemarks, Status);
        }
        
        public void Set_ChargeSlip_Head(
                    int CSNo, 
                    string SubjectName, 
                    decimal AmountCharged, 
                    System.DateTime Date, 
                    System.DateTime PaymentPeriodFrom, 
                    System.DateTime PaymentPeriodTo, 
                    bool ChargeToToll, 
                    bool ChargeToSupplier, 
                    bool ChargeToFBCEmp, 
                    bool ChargeToTrucking, 
                    bool ChargeToADP, 
                    bool ChargeToTDC, 
                    bool QARR, 
                    int QARRNo, 
                    bool LNCR, 
                    int LNCRNo, 
                    bool TNCR, 
                    int TNCRNo, 
                    bool NTE, 
                    int NTENo, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    System.DateTime PreparedByDate, 
                    int NotedByID, 
                    System.DateTime NotedByDate, 
                    int ReceivedByID, 
                    System.DateTime ReceivedByDate, 
                    bool LackOfAttachment, 
                    bool ForInspection, 
                    bool WithContention, 
                    bool AuditOthers, 
                    string AuditOthersRemarks, 
                    string PaymentPendingUpdate, 
                    string FinalResolution, 
                    bool Status) {
            base.Channel.Set_ChargeSlip_Head(CSNo, SubjectName, AmountCharged, Date, PaymentPeriodFrom, PaymentPeriodTo, ChargeToToll, ChargeToSupplier, ChargeToFBCEmp, ChargeToTrucking, ChargeToADP, ChargeToTDC, QARR, QARRNo, LNCR, LNCRNo, TNCR, TNCRNo, NTE, NTENo, Others, OthersRemarks, PreparedByID, PreparedByDate, NotedByID, NotedByDate, ReceivedByID, ReceivedByDate, LackOfAttachment, ForInspection, WithContention, AuditOthers, AuditOthersRemarks, PaymentPendingUpdate, FinalResolution, Status);
        }
        
        public System.Threading.Tasks.Task Set_ChargeSlip_HeadAsync(
                    int CSNo, 
                    string SubjectName, 
                    decimal AmountCharged, 
                    System.DateTime Date, 
                    System.DateTime PaymentPeriodFrom, 
                    System.DateTime PaymentPeriodTo, 
                    bool ChargeToToll, 
                    bool ChargeToSupplier, 
                    bool ChargeToFBCEmp, 
                    bool ChargeToTrucking, 
                    bool ChargeToADP, 
                    bool ChargeToTDC, 
                    bool QARR, 
                    int QARRNo, 
                    bool LNCR, 
                    int LNCRNo, 
                    bool TNCR, 
                    int TNCRNo, 
                    bool NTE, 
                    int NTENo, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    System.DateTime PreparedByDate, 
                    int NotedByID, 
                    System.DateTime NotedByDate, 
                    int ReceivedByID, 
                    System.DateTime ReceivedByDate, 
                    bool LackOfAttachment, 
                    bool ForInspection, 
                    bool WithContention, 
                    bool AuditOthers, 
                    string AuditOthersRemarks, 
                    string PaymentPendingUpdate, 
                    string FinalResolution, 
                    bool Status) {
            return base.Channel.Set_ChargeSlip_HeadAsync(CSNo, SubjectName, AmountCharged, Date, PaymentPeriodFrom, PaymentPeriodTo, ChargeToToll, ChargeToSupplier, ChargeToFBCEmp, ChargeToTrucking, ChargeToADP, ChargeToTDC, QARR, QARRNo, LNCR, LNCRNo, TNCR, TNCRNo, NTE, NTENo, Others, OthersRemarks, PreparedByID, PreparedByDate, NotedByID, NotedByDate, ReceivedByID, ReceivedByDate, LackOfAttachment, ForInspection, WithContention, AuditOthers, AuditOthersRemarks, PaymentPendingUpdate, FinalResolution, Status);
        }
        
        public void Set_Logistics_BodyReport(int LNCRBodyID, int LNCRHeadID, string DocumentReferenceNo, string ItemCustomer, decimal Quantity, string UnitOfMeasurement, decimal Amount, string Remarks, bool Status) {
            base.Channel.Set_Logistics_BodyReport(LNCRBodyID, LNCRHeadID, DocumentReferenceNo, ItemCustomer, Quantity, UnitOfMeasurement, Amount, Remarks, Status);
        }
        
        public System.Threading.Tasks.Task Set_Logistics_BodyReportAsync(int LNCRBodyID, int LNCRHeadID, string DocumentReferenceNo, string ItemCustomer, decimal Quantity, string UnitOfMeasurement, decimal Amount, string Remarks, bool Status) {
            return base.Channel.Set_Logistics_BodyReportAsync(LNCRBodyID, LNCRHeadID, DocumentReferenceNo, ItemCustomer, Quantity, UnitOfMeasurement, Amount, Remarks, Status);
        }
        
        public string Set_Logistics_HeaderReport(
                    int LNCRHeadID, 
                    int CompanyID, 
                    int SupplierID, 
                    string DriverName, 
                    string Helper, 
                    System.DateTime Date, 
                    System.DateTime ChargeSlipDate, 
                    System.DateTime TransactionDate, 
                    System.DateTime DateCreated, 
                    bool Category_Shortages, 
                    bool Category_LateLiquidation, 
                    bool Category_LateArrival, 
                    bool Category_NoShow, 
                    bool Category_LateDelivery, 
                    bool Category_NonDelivery, 
                    bool Category_QualityRelated, 
                    bool Category_Others, 
                    string Category_OthersRemarks, 
                    bool Penalty_WrittenWarning, 
                    bool Penalty_Charge, 
                    bool Penalty_Others, 
                    string Penalty_OthersRemarks, 
                    string PreparedBy, 
                    string AcknowledgeBy, 
                    string ApprovedBy, 
                    bool Status) {
            return base.Channel.Set_Logistics_HeaderReport(LNCRHeadID, CompanyID, SupplierID, DriverName, Helper, Date, ChargeSlipDate, TransactionDate, DateCreated, Category_Shortages, Category_LateLiquidation, Category_LateArrival, Category_NoShow, Category_LateDelivery, Category_NonDelivery, Category_QualityRelated, Category_Others, Category_OthersRemarks, Penalty_WrittenWarning, Penalty_Charge, Penalty_Others, Penalty_OthersRemarks, PreparedBy, AcknowledgeBy, ApprovedBy, Status);
        }
        
        public System.Threading.Tasks.Task<string> Set_Logistics_HeaderReportAsync(
                    int LNCRHeadID, 
                    int CompanyID, 
                    int SupplierID, 
                    string DriverName, 
                    string Helper, 
                    System.DateTime Date, 
                    System.DateTime ChargeSlipDate, 
                    System.DateTime TransactionDate, 
                    System.DateTime DateCreated, 
                    bool Category_Shortages, 
                    bool Category_LateLiquidation, 
                    bool Category_LateArrival, 
                    bool Category_NoShow, 
                    bool Category_LateDelivery, 
                    bool Category_NonDelivery, 
                    bool Category_QualityRelated, 
                    bool Category_Others, 
                    string Category_OthersRemarks, 
                    bool Penalty_WrittenWarning, 
                    bool Penalty_Charge, 
                    bool Penalty_Others, 
                    string Penalty_OthersRemarks, 
                    string PreparedBy, 
                    string AcknowledgeBy, 
                    string ApprovedBy, 
                    bool Status) {
            return base.Channel.Set_Logistics_HeaderReportAsync(LNCRHeadID, CompanyID, SupplierID, DriverName, Helper, Date, ChargeSlipDate, TransactionDate, DateCreated, Category_Shortages, Category_LateLiquidation, Category_LateArrival, Category_NoShow, Category_LateDelivery, Category_NonDelivery, Category_QualityRelated, Category_Others, Category_OthersRemarks, Penalty_WrittenWarning, Penalty_Charge, Penalty_Others, Penalty_OthersRemarks, PreparedBy, AcknowledgeBy, ApprovedBy, Status);
        }
        
        public void Set_Cod(int CODID, int NTEID, string Sec, string Para, string Provision, bool Status) {
            base.Channel.Set_Cod(CODID, NTEID, Sec, Para, Provision, Status);
        }
        
        public System.Threading.Tasks.Task Set_CodAsync(int CODID, int NTEID, string Sec, string Para, string Provision, bool Status) {
            return base.Channel.Set_CodAsync(CODID, NTEID, Sec, Para, Provision, Status);
        }
        
        public void Set_NoticeToExplain_Body(int OffenseID, int NTEID, string Details, bool Status) {
            base.Channel.Set_NoticeToExplain_Body(OffenseID, NTEID, Details, Status);
        }
        
        public System.Threading.Tasks.Task Set_NoticeToExplain_BodyAsync(int OffenseID, int NTEID, string Details, bool Status) {
            return base.Channel.Set_NoticeToExplain_BodyAsync(OffenseID, NTEID, Details, Status);
        }
        
        public string Set_NoticeToExplain_Head(int NTEID, int CompanyID, System.DateTime DATE, string EmployeeName, string Subject, System.DateTime IncidentDateTime, string IncidentSuspensionDays, string Remarks, bool Status, string IncidentLocation) {
            return base.Channel.Set_NoticeToExplain_Head(NTEID, CompanyID, DATE, EmployeeName, Subject, IncidentDateTime, IncidentSuspensionDays, Remarks, Status, IncidentLocation);
        }
        
        public System.Threading.Tasks.Task<string> Set_NoticeToExplain_HeadAsync(int NTEID, int CompanyID, System.DateTime DATE, string EmployeeName, string Subject, System.DateTime IncidentDateTime, string IncidentSuspensionDays, string Remarks, bool Status, string IncidentLocation) {
            return base.Channel.Set_NoticeToExplain_HeadAsync(NTEID, CompanyID, DATE, EmployeeName, Subject, IncidentDateTime, IncidentSuspensionDays, Remarks, Status, IncidentLocation);
        }
        
        public string Set_Qa_Report(
                    int QARRID, 
                    int CompanyID, 
                    string ReferenceCode, 
                    System.DateTime ReferenceDate, 
                    string IssuedTo, 
                    int SupplierID, 
                    string Department, 
                    string InitiatedBy, 
                    string NotedBy, 
                    string Subject, 
                    bool Type_Legal, 
                    bool Type_Product, 
                    bool Type_Procedure, 
                    bool Type_StructuralAndSanitation, 
                    bool Type_Other, 
                    string Type_OtherRemarks, 
                    bool NC_SupplierServiceProvider, 
                    bool NC_FBC, 
                    bool NC_Toll, 
                    bool NC_ADP, 
                    bool NC_Trucker, 
                    bool NC_Other, 
                    string NC_OtherRemarks, 
                    string SummaryReport, 
                    System.DateTime DateCreated, 
                    bool Status) {
            return base.Channel.Set_Qa_Report(QARRID, CompanyID, ReferenceCode, ReferenceDate, IssuedTo, SupplierID, Department, InitiatedBy, NotedBy, Subject, Type_Legal, Type_Product, Type_Procedure, Type_StructuralAndSanitation, Type_Other, Type_OtherRemarks, NC_SupplierServiceProvider, NC_FBC, NC_Toll, NC_ADP, NC_Trucker, NC_Other, NC_OtherRemarks, SummaryReport, DateCreated, Status);
        }
        
        public System.Threading.Tasks.Task<string> Set_Qa_ReportAsync(
                    int QARRID, 
                    int CompanyID, 
                    string ReferenceCode, 
                    System.DateTime ReferenceDate, 
                    string IssuedTo, 
                    int SupplierID, 
                    string Department, 
                    string InitiatedBy, 
                    string NotedBy, 
                    string Subject, 
                    bool Type_Legal, 
                    bool Type_Product, 
                    bool Type_Procedure, 
                    bool Type_StructuralAndSanitation, 
                    bool Type_Other, 
                    string Type_OtherRemarks, 
                    bool NC_SupplierServiceProvider, 
                    bool NC_FBC, 
                    bool NC_Toll, 
                    bool NC_ADP, 
                    bool NC_Trucker, 
                    bool NC_Other, 
                    string NC_OtherRemarks, 
                    string SummaryReport, 
                    System.DateTime DateCreated, 
                    bool Status) {
            return base.Channel.Set_Qa_ReportAsync(QARRID, CompanyID, ReferenceCode, ReferenceDate, IssuedTo, SupplierID, Department, InitiatedBy, NotedBy, Subject, Type_Legal, Type_Product, Type_Procedure, Type_StructuralAndSanitation, Type_Other, Type_OtherRemarks, NC_SupplierServiceProvider, NC_FBC, NC_Toll, NC_ADP, NC_Trucker, NC_Other, NC_OtherRemarks, SummaryReport, DateCreated, Status);
        }
        
        public void Set_Qa_Report_Imglnk(int ImgID, int QARRID, string ImgLnk, string FileName, System.DateTime FileDate, bool Status) {
            base.Channel.Set_Qa_Report_Imglnk(ImgID, QARRID, ImgLnk, FileName, FileDate, Status);
        }
        
        public System.Threading.Tasks.Task Set_Qa_Report_ImglnkAsync(int ImgID, int QARRID, string ImgLnk, string FileName, System.DateTime FileDate, bool Status) {
            return base.Channel.Set_Qa_Report_ImglnkAsync(ImgID, QARRID, ImgLnk, FileName, FileDate, Status);
        }
        
        public void Set_Tall_Report(
                    int TallID, 
                    int CompanyID, 
                    System.DateTime Date, 
                    string TotalAffected, 
                    decimal TotalAffectedAmount, 
                    bool InventoryVariance, 
                    bool RawMaterials, 
                    bool FinishedGoods, 
                    bool TechnicalScrap, 
                    bool YieldVariances, 
                    bool ConsumptionVariance, 
                    bool DelayReport, 
                    bool QADeviation, 
                    bool WrongLabel, 
                    bool ShortLacking, 
                    bool QANonConformance, 
                    bool WeakSeal, 
                    bool Bursting, 
                    bool LoosePack, 
                    bool Rejects, 
                    bool Contamination, 
                    bool SwabGMPSanitation, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    int ReceivedByID, 
                    int AcknowledgeByID, 
                    bool Status) {
            base.Channel.Set_Tall_Report(TallID, CompanyID, Date, TotalAffected, TotalAffectedAmount, InventoryVariance, RawMaterials, FinishedGoods, TechnicalScrap, YieldVariances, ConsumptionVariance, DelayReport, QADeviation, WrongLabel, ShortLacking, QANonConformance, WeakSeal, Bursting, LoosePack, Rejects, Contamination, SwabGMPSanitation, Others, OthersRemarks, PreparedByID, ReceivedByID, AcknowledgeByID, Status);
        }
        
        public System.Threading.Tasks.Task Set_Tall_ReportAsync(
                    int TallID, 
                    int CompanyID, 
                    System.DateTime Date, 
                    string TotalAffected, 
                    decimal TotalAffectedAmount, 
                    bool InventoryVariance, 
                    bool RawMaterials, 
                    bool FinishedGoods, 
                    bool TechnicalScrap, 
                    bool YieldVariances, 
                    bool ConsumptionVariance, 
                    bool DelayReport, 
                    bool QADeviation, 
                    bool WrongLabel, 
                    bool ShortLacking, 
                    bool QANonConformance, 
                    bool WeakSeal, 
                    bool Bursting, 
                    bool LoosePack, 
                    bool Rejects, 
                    bool Contamination, 
                    bool SwabGMPSanitation, 
                    bool Others, 
                    string OthersRemarks, 
                    int PreparedByID, 
                    int ReceivedByID, 
                    int AcknowledgeByID, 
                    bool Status) {
            return base.Channel.Set_Tall_ReportAsync(TallID, CompanyID, Date, TotalAffected, TotalAffectedAmount, InventoryVariance, RawMaterials, FinishedGoods, TechnicalScrap, YieldVariances, ConsumptionVariance, DelayReport, QADeviation, WrongLabel, ShortLacking, QANonConformance, WeakSeal, Bursting, LoosePack, Rejects, Contamination, SwabGMPSanitation, Others, OthersRemarks, PreparedByID, ReceivedByID, AcknowledgeByID, Status);
        }
    }
}
